{"version":3,"sources":["NewJoke.js","App.js","serviceWorker.js","index.js"],"names":["newJoke","props","class","src","alt","className","title","content","onClick","generate","btn","App","getData","a","fetch","promise","json","data","this","setState","getDataState","console","log","state","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAgCeA,G,YA9BC,SAACC,GAEb,OAII,6BAASC,MAAM,iBACX,4BAAQA,MAAM,iBACV,yBAAKC,IAAI,8DAA8DD,MAAM,2BAA2BE,IAAI,WAC5G,wBAAIF,MAAM,yBAAV,gCAIJ,6BAASG,UAAU,uCACf,wBAAIA,UAAU,sCAAsCJ,EAAMK,OAC1D,yBAAKD,UAAU,UACX,uBAAGA,UAAU,kCACRJ,EAAMM,WAMnB,4BAAQC,QAASP,EAAMQ,SAAUJ,UAAU,kDAAkDJ,EAAMS,QCShGC,E,kDA5Bb,aAAe,IAAD,8BACZ,gBAKFC,QANc,sBAMJ,8BAAAC,EAAA,sEACcC,MAAM,2CADpB,cACFC,EADE,gBAEWA,EAAQC,OAFnB,OAEFC,EAFE,OAGRC,KAAKC,SAAS,CACZC,aAAaH,EAAI,QAEnBI,QAAQC,IAAIL,GANJ,gDAJR,EAAKM,MAAQ,CAACH,aAAa,qBAFf,E,qDAkBJ,IAAD,OAEP,OAEE,kBAAC,EAAD,CAASV,IAAI,oBAAoBJ,MAAM,WAAWC,QAASW,KAAKK,MAAMH,aAAcX,SAAU,kBAAI,EAAKG,iB,GAvB3FY,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.f40f0fe7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './NewJoke.css';\r\nconst newJoke = (props) => {\r\n\r\n    return (\r\n\r\n\r\n\r\n        <section class=\"tc pa3 pa5-ns\">\r\n            <header class=\"tc pv4 pv5-ns\">\r\n                <img src=\"https://assets.chucknorris.host/img/avatar/chuck-norris.png\" class=\"br3 ba b--black-10 h3 w3\" alt=\"avatar\" />\r\n                <h1 class=\"f5 f4-ns fw6 black-70\">Chuck Nurris Joke Generator</h1>\r\n                \r\n            </header>\r\n\r\n            <article className=\"center mw5 mw6-ns hidden ba bw2 mv4\">\r\n                <h1 className=\"f4 bg-near-black white mv0 pv2 ph3\">{props.title}</h1>\r\n                <div className=\"pa3 bt\">\r\n                    <p className=\"f5 f4-ns lh-copy measure mv0 b\">\r\n                        {props.content}\r\n                    </p>\r\n                </div>\r\n\r\n            </article>\r\n\r\n            <button onClick={props.generate} className=\"f5 link dim br1 ph3 pv2 mb2 dib white bg-black\">{props.btn}</button>\r\n        </section>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default newJoke;","import React from 'react';\n\nimport './App.css';\nimport NewJoke from './NewJoke';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {getDataState:'Press the button!'};\n  }\n\n\n  getData = async function () {\n    const promise = await fetch('https://api.chucknorris.io/jokes/random');\n    const data = await promise.json();\n    this.setState({\n      getDataState:data['value']\n    })\n    console.log(data)\n    \n  }\n\n  \n\n  render() {\n    \n    return (\n     \n      <NewJoke btn=\"Generate New Joke\" title=\"New Joke\" content={this.state.getDataState} generate={()=>this.getData()}></NewJoke>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}